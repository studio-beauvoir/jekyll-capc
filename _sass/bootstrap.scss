$theme-colors: () !default;
$theme-colors: map-remove($theme-colors, "primary", "secondary", "dark");

$light-theme-colors: (
    "p-1": #171717,
    "p-2": #494949,
    "p-3": #8F8F8F,
    
    "s-1": #3451B2,
    "s-2": #5F80ED,
    "s-3": #D9E2FC,
    
    "t-1": #CA3214,
    "t-2": #E54D2E,
    "t-3": #F3B0A2,
    
    "b-1": #F8F8F8,
    "b-2": #F2F2F0,
    "b-3": #E8E8E2
);

$dark-theme-colors: (
    "p-1": #F2F2F0,
    "p-2": #D9D9D7,
    "p-3": #737372,
    
    "s-1": #ADBEFF,
    "s-2": #5B79C6,
    "s-3": #335297,
    
    "t-1": #FECACA,
    "t-2": #F87171,
    "t-3": #DC2626,
    
    "b-1": #151617,
    "b-2": #27292C,
    "b-3": #393B41
);

$themes: (
    'light': $light-theme-colors,
    'dark': $dark-theme-colors,
);

$states: (
    '': '',
    'hover\\:': ':hover',
    'active\\:': ':active',
    'focus\\:': ':focus'
);

$enable-negative-margins: true;
// Merge the maps
$border-radius-sm: 0.625rem; // 10px
$border-radius: 0.938rem; // 15px
$border-radius-lg: 1.25rem; // 20px
$border-radius-xl: 1.875rem; // 30px

$utilities: () !default;
$utilities: map-merge(
    $utilities,
    (
        "rounded": (
            property: border-radius,
            class: rounded,
            values: (
                null: $border-radius,
                0: 0,
                10: $border-radius-sm,
                15: $border-radius,
                20: $border-radius-lg,
                30: $border-radius-xl,
                circle: 50%,
            ),
            responsive: true
        ),

        "text": (
            property: font,
            class: text,
            responsive: true,
            values: (
                "h1": var(--h1),
                "h2": var(--h2),
                "h3": var(--h3),
                "h4": var(--h4),
                "h5": var(--h5),
                "p": var(--p),
                "label": var(--label)
            )
        )
    )
);


@import "vendors/bootstrap";
@import "var";


// theme text-color, background-color, border-color...
@each $stateClass, $stateSelector in $states {

    @each $themeName, $themeColors in $themes {
        html[data-theme="#{$themeName}"] {
            @each $colorName, $color in $themeColors {
                .#{$stateClass}bg-#{$colorName}#{$stateSelector} { background-color: $color !important }

                .#{$stateClass}text-#{$colorName}#{$stateSelector} { color: $color !important }
                
                .#{$stateClass}border-#{$colorName}#{$stateSelector} { border-color: $color !important }
            }


            @each $colorName, $color in $themeColors {
                .#{$stateClass}bg-#{$colorName}--#{$themeName}Theme#{$stateSelector} { background-color: $color !important }

                .#{$stateClass}text-#{$colorName}--#{$themeName}Theme#{$stateSelector} { color: $color !important }
        
                .#{$stateClass}border-#{$colorName}--#{$themeName}Theme#{$stateSelector} { border-color: $color !important }
            }
        }
    }
}



$spacerDirections: (
    'l': '-left',
    'r': '-right',
);
$spacerTypes: (
    'm': 'margin',
    'p': 'padding',
);

// margin for containers
// logique:
// margin-left = margin-right = (100vw-$largeurContainer)/2 - $container-padding-x
// AAAAAAAAAAAAAAAAAH CA MARCHE

@each $spacerTypeName, $spacerTypeProp in $spacerTypes {
    @each $spacerDirName, $spacerDirProp in $spacerDirections {

        .#{$spacerTypeName}-container { // x: left & right
            #{$spacerTypeProp}-left: 0;
            #{$spacerTypeProp}-right: 0;
        }
        .#{$spacerTypeName}#{$spacerDirName}-container {
            #{$spacerTypeProp}#{$spacerDirProp}: 0;
        }

        .#{$spacerTypeName}-container-p { // x: left & right
            #{$spacerTypeProp}-left: $container-padding-x * 2;
            #{$spacerTypeProp}-right: $container-padding-x * 2;
        }
        .#{$spacerTypeName}#{$spacerDirName}-container-p {
            #{$spacerTypeProp}#{$spacerDirProp}: $container-padding-x * 2;
        }

        @each $containerBreakpoint, $containerWidth in $container-max-widths {

            @include media-breakpoint-up($containerBreakpoint) {
                .#{$spacerTypeName}-container { // x: left & right
                    #{$spacerTypeProp}-left: calc( (100vw - #{$containerWidth}) / 2 );
                    #{$spacerTypeProp}-right: calc( (100vw - #{$containerWidth}) / 2 );
                }
                .#{$spacerTypeName}#{$spacerDirName}-container {
                    #{$spacerTypeProp}#{$spacerDirProp}: calc( (100vw - #{$containerWidth}) / 2 );
                }
    
                .#{$spacerTypeName}-container-p { // x: left & right
                    #{$spacerTypeProp}-left: calc( (100vw - #{$containerWidth}) / 2);
                    #{$spacerTypeProp}-right: calc( (100vw - #{$containerWidth}) / 2);
                }
                .#{$spacerTypeName}#{$spacerDirName}-container-p {
                    #{$spacerTypeProp}#{$spacerDirProp}: calc( (100vw - #{$containerWidth}) / 2);
                }
            }
            
        }
    }
}


@each $themeName, $themeColors in $themes {
    html[data-theme="#{$themeName}"] {
        @each $colorName, $color in $themeColors {
            --#{$colorName}: #{$color};
        }
    }
}